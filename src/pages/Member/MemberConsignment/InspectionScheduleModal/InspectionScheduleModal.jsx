import React, { useState } from "react";
import { Modal, Descriptions, Tag, Spin, Button } from "antd";
import "./InspectionScheduleModal.scss";
import {
  INSPECTION_STATUS_COLOR,
  INSPECTION_STATUS_LABELS,
} from "../../../../utils/constants";
import CancelInspectionModal from "../../../../components/CancelInspectionModal/CancelInspectionModal";

const InspectionScheduleModal = ({
  open,
  onClose,
  data,
  loading,
  onCancelSchedule, // ‚úÖ callback t·ª´ parent (useManagerConsignment)
}) => {
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [loadingCancel, setLoadingCancel] = useState(false);

  const handleConfirmCancel = async (reason) => {
    if (!data?.id) return;
    try {
      setLoadingCancel(true);
      await onCancelSchedule(data.id, reason); // G·ªçi API h·ªßy
      setShowCancelModal(false);
      onClose(); // ƒê√≥ng modal l·ªãch
    } catch (err) {
      console.error("Cancel inspection error:", err);
    } finally {
      setLoadingCancel(false);
    }
  };

  return (
    <>
      {/* üîπ Modal ch√≠nh hi·ªÉn th·ªã th√¥ng tin l·ªãch ki·ªÉm ƒë·ªãnh */}
      <Modal
        open={open}
        onCancel={onClose}
        footer={
          <div style={{ textAlign: "right" }}>
            <Button onClick={onClose}>ƒê√≥ng</Button>
            <Button
              danger
              type="primary"
              style={{ marginLeft: 8 }}
              disabled={data?.status !== "SCHEDULED"}
              onClick={() => setShowCancelModal(true)} // m·ªü modal nh·∫≠p l√Ω do
            >
              H·ªßy l·ªãch
            </Button>
          </div>
        }
        title="Th√¥ng tin l·ªãch ki·ªÉm ƒë·ªãnh"
        width={650}
        className="modal"
      >
        {loading ? (
          <div style={{ textAlign: "center", padding: "40px 0" }}>
            <Spin size="large" />
          </div>
        ) : data ? (
          <Descriptions column={1} bordered>
            <Descriptions.Item label="Ng√†y h·∫πn">
              {data.scheduleDate}
            </Descriptions.Item>
            <Descriptions.Item label="Ca l√†m">
              {data.shiftCode} ({data.shiftStartTime} - {data.shiftEndTime})
            </Descriptions.Item>
            <Descriptions.Item label="Chi nh√°nh">
              {data.branchName}
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              <Tag color={INSPECTION_STATUS_COLOR[data.status] || "default"}>
                {INSPECTION_STATUS_LABELS[data.status] || data.status}
              </Tag>
            </Descriptions.Item>
            <Descriptions.Item label="Ng∆∞·ªùi l√™n l·ªãch">
              {data.scheduledByName || "Kh√¥ng c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Ng∆∞·ªùi ki·ªÉm ƒë·ªãnh">
              {data.staffName || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Ghi ch√∫">
              {data.note || "Kh√¥ng c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Ng√†y t·∫°o">
              {new Date(data.createdAt).toLocaleString()}
            </Descriptions.Item>
            {data.cancelledReason && (
              <Descriptions.Item label="L√Ω do h·ªßy">
                {data.cancelledReason}
              </Descriptions.Item>
            )}
          </Descriptions>
        ) : (
          <p style={{ textAlign: "center" }}>Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch h·∫πn.</p>
        )}
      </Modal>

      {/* üîπ Modal nh·∫≠p l√Ω do (d√πng l·∫°i component b·∫°n ƒë√£ c√≥) */}
      <CancelInspectionModal
        open={showCancelModal}
        onCancel={() => setShowCancelModal(false)}
        onConfirm={handleConfirmCancel}
        loading={loadingCancel}
      />
    </>
  );
};

export default InspectionScheduleModal;
